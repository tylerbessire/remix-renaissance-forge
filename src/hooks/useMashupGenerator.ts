import { useState, useEffect, useRef } from "react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

// --- Interface Definitions ---
interface Song {
  id: string;
  name: string;
  artist: string;
  file: File;
}

interface UploadedSong {
  storage_path: string;
  song_id: string;
  name: string;
  artist: string;
}

interface MashupResult {
  title: string;
  concept: string;
  audioUrl: string;
}

interface JobStatusResponse {
  success: boolean;
  jobId: string;
  status: 'pending' | 'processing' | 'complete' | 'failed';
  resultUrl?: string;
  error?: string;
  title?: string;
  concept?: string;
}

const sanitizeFilename = (filename: string): string => {
  return filename.replace(/\s+/g, '_').replace(/[^a-zA-Z0-9-_\.]/g, '');
};

export const useMashupGenerator = () => {
  const [isProcessing, setIsProcessing] = useState(false);
  const [progress, setProgress] = useState(0);
  const [processingStep, setProcessingStep] = useState("");
  const [jobId, setJobId] = useState<string | null>(null);
  const [result, setResult] = useState<MashupResult | null>(null);
  const pollIntervalRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    const cleanup = () => {
      if (pollIntervalRef.current) {
        clearInterval(pollIntervalRef.current);
        pollIntervalRef.current = null;
      }
    };

    if (jobId) {
      pollIntervalRef.current = setInterval(async () => {
        try {
          const { data, error } = await supabase.functions.invoke<JobStatusResponse>('get-mashup-status', {
            body: { jobId },
          });

          if (error) throw error;

          setProcessingStep(`Status: ${data?.status || 'processing'}`);

          if (data?.status === 'complete' && data.resultUrl) {
            cleanup();
            const { data: signedUrlData, error: signedUrlError } = await supabase.storage
              .from('mashups')
              .createSignedUrl(data.resultUrl, 3600);
            if (signedUrlError) throw signedUrlError;

            setResult({
              title: data.title || "AI Mashup",
              concept: data.concept || "Generated by the AI director.",
              audioUrl: signedUrlData.signedUrl
            });
            toast.success("Your mashup is ready!");
            setIsProcessing(false);
            setJobId(null);
          } else if (data?.status === 'failed') {
            cleanup();
            toast.error(`Mashup failed: ${data.error || 'Unknown reason'}`);
            setIsProcessing(false);
            setJobId(null);
          }
        } catch (e) {
          cleanup();
          toast.error("Failed to get mashup status.");
          setIsProcessing(false);
          setJobId(null);
        }
      }, 5000);
    }

    return cleanup;
  }, [jobId]);

  const uploadSong = async (song: Song): Promise<UploadedSong> => {
    const safeFilename = sanitizeFilename(song.file.name);
    const filePath = `uploads/${song.id}/${safeFilename}`;
    const { error } = await supabase.storage.from('mashups').upload(filePath, song.file, { upsert: true });
    if (error) throw new Error(`Failed to upload ${song.name}: ${error.message}`);
    return { storage_path: filePath, song_id: song.id, name: song.name, artist: song.artist };
  };

  const generateMashup = async (songs: Song[]): Promise<void> => {
    if (songs.length < 2) {
      toast.error("Please select at least 2 songs.");
      return;
    }

    setIsProcessing(true);
    setResult(null);
    setProgress(0);
    setProcessingStep("Uploading tracks...");

    try {
      const uploadedSongs = await Promise.all(songs.map(song => uploadSong(song)));
      setProgress(50);
      setProcessingStep("Starting the mashup process...");

      const { data, error } = await supabase.functions.invoke<{ success: boolean; jobId: string; details?: string }>('generate-mashup', {
        body: { songs: uploadedSongs },
      });

      if (error) throw error;
      if (!data?.success || !data.jobId) {
        throw new Error(data?.details || "Failed to start the mashup job.");
      }

      setJobId(data.jobId);
    } catch (error) {
      toast.error(error instanceof Error ? error.message : "An unknown error occurred.");
      setIsProcessing(false);
    }
  };

  return {
    generateMashup,
    isProcessing,
    progress,
    processingStep,
    result,
  };
};
